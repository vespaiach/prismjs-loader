{
  "version": 3,
  "sources": ["../prismjs-loader.js"],
  "sourcesContent": [";(function () {\n  if (typeof document === 'undefined') {\n    return\n  }\n\n  const BASE_URL = 'https://cdn.jsdelivr.net/gh/PrismJS/prism@1.30.0'\n  const ALL_THEMES = ['prism', 'prism-coy', 'prism-dark', 'prism-funky', 'prism-okaidia', 'prism-solarizedlight', 'prism-tomorrow', 'prism-twilight']\n  const DEFAULT_THEME = ALL_THEMES[0]\n\n  /**\n   * Extracts the theme name and mode (dark or light) from a given class name.\n   *\n   * @param {string} className - The class name string to parse.\n   * @returns {{ name: string, forDarkMode: boolean } | null} Parsed theme object or `null` if invalid.\n   */\n  function getThemeNameAndMode(className) {\n    const raw = (className ?? '').toLowerCase()\n    const name = raw.replace(/^(dark:|light:)/i, '')\n    return ALL_THEMES.includes(name) ? { name, forDarkMode: raw.startsWith('dark:') } : null\n  }\n\n  /**\n   * Retrieves theme options for light and dark modes based on the current script's class list.\n   *\n   * @returns {Object} Theme options for light and dark modes.\n   */\n  function getThemeOptions() {\n    const parseTheme = (theme) => {\n      const themeObject = getThemeNameAndMode(theme)\n      return themeObject\n        ? { dark: themeObject.forDarkMode ? themeObject.name : undefined, light: themeObject.forDarkMode ? undefined : themeObject.name }\n        : { light: DEFAULT_THEME }\n    }\n\n    const scriptElement = document.currentScript\n    if (scriptElement?.tagName === 'SCRIPT') {\n      if (scriptElement.classList.length === 0) {\n        return { light: DEFAULT_THEME }\n      }\n      const option1 = parseTheme(scriptElement.classList[0])\n      const option2 = parseTheme(scriptElement.classList[1])\n      return { dark: option1.dark ?? option2.dark, light: option1.light ?? option2.light }\n    }\n\n    return { light: DEFAULT_THEME }\n  }\n\n  /**\n   * Dynamically adds a script or stylesheet element to the document.\n   *\n   * @param {string} tagName - The type of element to create ('script' or 'link').\n   * @param {string} src - The source URL for the script or stylesheet.\n   * @param {Function} [success] - Optional callback function to execute when the element is successfully loaded.\n   */\n  function addElement(tagName, src, success) {\n    const element = document.createElement(tagName)\n    if (tagName === 'link') {\n      element.rel = 'stylesheet'\n      element.href = `${BASE_URL}${src}`\n    } else if (tagName === 'script') {\n      element.defer = true\n      element.src = `${BASE_URL}${src}`\n    }\n\n\t\telement.onload = () => { success?.() }\n    document.body.appendChild(element)\n  }\n\n  // Stop Prism from auto-highlighting\n  window.Prism = window.Prism || {}\n  window.Prism.manual = true\n\n  const themes = getThemeOptions()\n  const isDarkMode = window.matchMedia?.('(prefers-color-scheme: dark)').matches\n  const scriptsToLoad = [\n    { tagName: 'link', src: `/themes/${isDarkMode ? themes.dark ?? themes.light : themes.light}.min.css` },\n    { tagName: 'script', src: '/components/prism-core.min.js' },\n    { tagName: 'script', src: '/plugins/autoloader/prism-autoloader.min.js' }\n  ]\n\n  let loadedCount = 0\n\n  /**\n   * Callback to execute when all scripts are loaded.\n   */\n  function onLoaded() {\n    Prism.highlightAll()\n  }\n\n  try {\n    scriptsToLoad.forEach(({ tagName, src }) => {\n      addElement(tagName, src, () => {\n        loadedCount++\n        if (loadedCount === scriptsToLoad.length) {\n          onLoaded()\n        }\n      })\n    })\n  } catch (error) {\n    console.error('Error loading PrismJS:', error)\n  }\n})()\n"],
  "mappings": "oEAAA,IAAAA,EAAAC,EAAA,MAAE,UAAY,CAAd,IAAAC,EAAAC,EACE,GAAI,OAAO,SAAa,IACtB,OAGF,IAAMC,EAAW,mDACXC,EAAa,CAAC,QAAS,YAAa,aAAc,cAAe,gBAAiB,uBAAwB,iBAAkB,gBAAgB,EAC5IC,EAAgBD,EAAW,CAAC,EAQlC,SAASE,EAAoBC,EAAW,CACtC,IAAMC,GAAOD,GAAA,KAAAA,EAAa,IAAI,YAAY,EACpCE,EAAOD,EAAI,QAAQ,mBAAoB,EAAE,EAC/C,OAAOJ,EAAW,SAASK,CAAI,EAAI,CAAE,KAAAA,EAAM,YAAaD,EAAI,WAAW,OAAO,CAAE,EAAI,IACtF,CAOA,SAASE,GAAkB,CA1B7B,IAAAT,EAAAC,EA2BI,IAAMS,EAAcC,GAAU,CAC5B,IAAMC,EAAcP,EAAoBM,CAAK,EAC7C,OAAOC,EACH,CAAE,KAAMA,EAAY,YAAcA,EAAY,KAAO,OAAW,MAAOA,EAAY,YAAc,OAAYA,EAAY,IAAK,EAC9H,CAAE,MAAOR,CAAc,CAC7B,EAEMS,EAAgB,SAAS,cAC/B,IAAIA,GAAA,YAAAA,EAAe,WAAY,SAAU,CACvC,GAAIA,EAAc,UAAU,SAAW,EACrC,MAAO,CAAE,MAAOT,CAAc,EAEhC,IAAMU,EAAUJ,EAAWG,EAAc,UAAU,CAAC,CAAC,EAC/CE,EAAUL,EAAWG,EAAc,UAAU,CAAC,CAAC,EACrD,MAAO,CAAE,MAAMb,EAAAc,EAAQ,OAAR,KAAAd,EAAgBe,EAAQ,KAAM,OAAOd,EAAAa,EAAQ,QAAR,KAAAb,EAAiBc,EAAQ,KAAM,CACrF,CAEA,MAAO,CAAE,MAAOX,CAAc,CAChC,CASA,SAASY,EAAWC,EAASC,EAAKC,EAAS,CACzC,IAAMC,EAAU,SAAS,cAAcH,CAAO,EAC1CA,IAAY,QACdG,EAAQ,IAAM,aACdA,EAAQ,KAAO,GAAGlB,CAAQ,GAAGgB,CAAG,IACvBD,IAAY,WACrBG,EAAQ,MAAQ,GAChBA,EAAQ,IAAM,GAAGlB,CAAQ,GAAGgB,CAAG,IAGnCE,EAAQ,OAAS,IAAM,CAAED,GAAA,MAAAA,GAAY,EACnC,SAAS,KAAK,YAAYC,CAAO,CACnC,CAGA,OAAO,MAAQ,OAAO,OAAS,CAAC,EAChC,OAAO,MAAM,OAAS,GAEtB,IAAMC,EAASZ,EAAgB,EAEzBa,EAAgB,CACpB,CAAE,QAAS,OAAQ,IAAK,aAFPtB,EAAA,OAAO,aAAP,YAAAA,EAAA,YAAoB,gCAAgC,WAErBC,EAAAoB,EAAO,OAAP,KAAApB,EAA8BoB,EAAO,KAAK,UAAW,EACrG,CAAE,QAAS,SAAU,IAAK,+BAAgC,EAC1D,CAAE,QAAS,SAAU,IAAK,6CAA8C,CAC1E,EAEIE,EAAc,EAKlB,SAASC,GAAW,CAClB,MAAM,aAAa,CACrB,CAEA,GAAI,CACFF,EAAc,QAAQ,CAAC,CAAE,QAAAL,EAAS,IAAAC,CAAI,IAAM,CAC1CF,EAAWC,EAASC,EAAK,IAAM,CAC7BK,IACIA,IAAgBD,EAAc,QAChCE,EAAS,CAEb,CAAC,CACH,CAAC,CACH,OAASC,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,CAC/C,CACF,GAAG",
  "names": ["require_prismjs_loader", "__commonJSMin", "_a", "_b", "BASE_URL", "ALL_THEMES", "DEFAULT_THEME", "getThemeNameAndMode", "className", "raw", "name", "getThemeOptions", "parseTheme", "theme", "themeObject", "scriptElement", "option1", "option2", "addElement", "tagName", "src", "success", "element", "themes", "scriptsToLoad", "loadedCount", "onLoaded", "error"]
}
